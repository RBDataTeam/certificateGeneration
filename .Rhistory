p <- p + annotate("text",
x = 4.8, y = gridBar+2,
label = "Problem \n Solving",
family = "Tahoma",
size = 2.5)
p <- p + annotate("text",
x = 6.2, y = gridBar+1.7,
label = "Communication",
family = "Tahoma",
size = 2.5)
p <- p + annotate("text",
x = 7.1, y = gridBar+3,
label = "Community \nCollaboration",
family = "Tahoma",
size = 2.5)
p <- p + annotate("text",
x = 8, y = gridBar+1.7,
label = "Grit",
family = "Tahoma",
size = 2.5)
p <- p + annotate("text",
x = 8.9, y = gridBar+2.5,
label = "Applied \nEmpathy",
family = "Tahoma",
size = 2.5)
p <- p + annotate("text",
x = 9.8, y = gridBar+2,
label = "Entrepreneurship",
family = "Tahoma",
size = 2.5)
# Adding student details on certificate
certificate <- certificate %>%
add_slide(layout = "Title and Content", master = "Office Theme")%>%
ph_empty_at(left=1.49, top=2.49,
width=5.77, height=1.05)%>%
ph_empty_at(left=5.00, top=9.28,
width=2.5, height=0.47)%>%
ph_add_fpar(certText, level = 1, id_chr = 2) %>%
ph_add_par(level = 1, id_chr = 3) %>%
ph_add_text(paste0("You are a ", studentPersona,". You are at ",
studentLadder, " level."),
type = "body",
id_chr = 3,
style = fp_text(color = "black",
font.size = 10,
font.family = "Tahoma"))
# Inserting students Skill Plot
certificate <- ph_with_gg_at(x = certificate, value = p,
left = 1.739726, top = 6.868362,
height = 2.87, width = 3.3)
# Inserting students Solve Ninja Image
certificate <- ph_with_img_at(x = certificate,
src = img_src[paste0(studentPersona,".pic")],
left = as.numeric(img_src[paste0(studentPersona,".left")]),
top = as.numeric(img_src[paste0(studentPersona,".top")]),
height = as.numeric(img_src[paste0(studentPersona,".height")]),
width = as.numeric(img_src[paste0(studentPersona,".width")]))
}
#Print the final certificate
print(certificate, paste0(output_directory,"/certificates_",
trainxl$School_Name[1], "_",
round(as.numeric(Sys.time()),0),
".pptx"))
options(warn = oldw)
rm(list = ls())
setwd("G:/Reap Benefit/Data/Story Tracker")
library(tidyverse)
library(lubridate)
library(stringi)
# Read data
story_tracker <- readxl::read_xlsx("StoryTracker.xlsx", sheet = 1)
# Calculate Actions
story_tracker <- story_tracker %>%
mutate (
`Name of Student ?` = str_to_title(`Name of Student ?`),
Add_report = case_when(
`Type of Story?` =="New Action - Issue Reported" ~ 1,
TRUE ~ 0),
Report_follow = case_when(
`How many time did the student follow up with the stakeholder` > 0  ~ 1,
TRUE ~ 0),
Add_campaign = case_when(
`Type of Story?` =="New Action - Campaign Creation / Participation" ~ 1,
TRUE ~ 0),
Campaign_join = case_when(
`How many ninjas participated in the campaign?` > 0  ~ 1,
TRUE ~ 0),
Campaign_teamupdate = case_when(
stri_length(`Please write if you want to highlight more about this - please include campaign team members names Please separate names with semi-colons (;)`) > 3 ~ 1,
TRUE ~ 0),
Solutions_desc = case_when(
stri_length(`If it is a new solutions built, please describe  the steps to build it`) > 3 ~ 1,
TRUE ~ 0),
Solutions_bene = case_when(
`Electricity saved (in units) (through the product)`> 1 ~ 1,
`Water Saved (In Litres) (through the product)`> 1 ~ 1,
`Waste Diverted (Kg) (through the product)`> 1 ~ 1,
TRUE ~ 0),
Solutions_idea = case_when(
`Solution Type` == "Idea" ~ 1,
TRUE ~ 0),
Solutions_proto = case_when(
`Solution Type` == "Prototype" ~ 1,
TRUE ~ 0),
Solutions_product = case_when(
`Solution Type` == "Final product" ~ 1,
TRUE ~ 0),
Successstory_report = case_when(
`Describe action taken` =="Reported an Issue and then Followed multiple times"  ~ 1,
TRUE ~ 0),
Successstory_audit = case_when(
`Describe action taken` =="Did Waste/Water Audit"  ~ 1,
TRUE ~ 0),
Successstory_campaign = case_when(
`Describe action taken` =="Created a Campaign and solved the Issue"  ~ 1,
TRUE ~ 0),
Successstory_product_implement = case_when(
`Describe action taken` =="Implemented a Product/Service to Solve a Problem"  ~ 1,
TRUE ~ 0),
Successstory_product_suggest = case_when(
`Describe action taken` =="Suggested a product to solve a Problem"  ~ 1,
TRUE ~ 0),
Successstory_impact = case_when(
stri_length(`What is the impact of this action? (through the story)`) > 5 ~ 1,
TRUE ~ 0),
Report_metofficial = case_when(
`Did  the Student meet Govt Official/Stakeholder for reporting the issue?` == "Yes" ~ 1,
TRUE ~ 0),
Report_convincingother = case_when(
stri_length(`How many team members reported the issues? (include total number of students)`) > 1 ~ 1,
TRUE ~ 0),
Report_multipleagency = case_when(
stri_length(`If student reported the same issue to multiple stakeholder then select the specific agency`) > 1 ~ 1,
TRUE ~ 0),
Report_calculatingimpact = case_when(
`Did the student calculate the impact from the reporting actions taken?` == "Yes" ~ 1,
TRUE ~ 0),
Campaign_Impactdetails = case_when(
`Water Saved (in Litres) (Through the campaign)` > 0 ~ 1,
`Waste Redirected (in kg) (Through the campaign)` > 0 ~ 1,
`Electricity Saved (in Units) (Through the campaign)` > 0 ~ 1,
TRUE ~ 0),
Campaign_fundraised = case_when(
`Value of funds raised so far (in the campaign)` > 0 ~ 1,
TRUE ~ 0),
Campaign_peoplereached = case_when(
`How many community members did the campaign reach out to?` > 0 ~ 1,
TRUE ~ 0),
Solution_noofimplement = case_when(
`Number of solutions (UPOs / Urinals etc) implemented (of this solutions)` > 0 ~ 1,
TRUE ~ 0),
Solutions_feedback = case_when(
`Did the student document feedback from the user?` == "Yes" ~ 1,
TRUE ~ 0),
Solutions_involved = case_when(
`How many ninjas were involved creation and design of the solution?` > 0 ~ 1,
TRUE ~ 0),
Solutions_multipleprototype = case_when(
`Did the student make multiple prototypes of the product?` == "Yes" ~ 1,
TRUE ~ 0),
Success_story = case_when(
`Type of Story?` =="New Action - Success Story" ~ 1,
TRUE ~ 0),
#Skills
Data_orientation = Add_report +  Campaign_teamupdate +
Successstory_report + Successstory_product_implement +
Successstory_product_suggest + Successstory_impact +
Solutions_bene + Solutions_idea + Solutions_proto + Solutions_product +
Report_calculatingimpact + Campaign_Impactdetails + Solutions_feedback,
hands_on = Successstory_product_implement + Solutions_desc +
Solutions_idea + Solutions_proto + Solution_noofimplement
+ Solutions_multipleprototype,
citizenship = Add_report + Report_follow + Add_campaign +
Campaign_join + Successstory_report +
Successstory_audit + Successstory_campaign +
Successstory_product_suggest + Successstory_product_implement +
Solutions_desc + Solutions_product + Report_metofficial +
Report_convincingother + Report_multipleagency + Campaign_peoplereached +
Solutions_involved,
problem_solving = Add_report + Report_follow + Add_campaign +
Successstory_campaign + Successstory_product_implement +
Solutions_idea + Solutions_proto + Solutions_product +
Report_calculatingimpact + Campaign_Impactdetails +
Campaign_fundraised + Solutions_involved +
Solutions_multipleprototype,
communications = Add_report + Report_follow +
Add_campaign + Campaign_teamupdate + Successstory_report +
Successstory_campaign + Solutions_desc + Solutions_idea +
Solutions_proto + Solutions_product + Report_metofficial +
Report_convincingother + Report_multipleagency + Campaign_peoplereached,
critical_thinking = Add_report + Campaign_teamupdate +
Successstory_report + Successstory_product_implement +
Successstory_impact + Solutions_product + Solutions_proto +
Solutions_idea + Solutions_desc + Solutions_bene +
Report_calculatingimpact + Campaign_Impactdetails + Solutions_feedback +
Solutions_multipleprototype,
community_collaboration = Add_campaign + Campaign_join +
Successstory_campaign + Report_metofficial + Report_convincingother+
Report_multipleagency + Campaign_peoplereached +
Solution_noofimplement + Solutions_involved,
Applied_empathy = Add_report + Campaign_teamupdate + Successstory_impact +
Solutions_product + Solutions_proto + Solutions_idea +
Solutions_desc + Solutions_bene + Report_convincingother+
Report_calculatingimpact + Campaign_peoplereached +
Campaign_Impactdetails,
Grit = Report_follow + Add_campaign + Campaign_join +
Campaign_teamupdate + Successstory_campaign +
Successstory_product_implement + Solutions_idea + Solutions_proto+
Report_metofficial + Report_multipleagency  +
Solution_noofimplement + Solutions_multipleprototype,
Entrepreneurship = Report_follow + Add_campaign + Campaign_teamupdate +
Successstory_campaign + Successstory_product_implement +
Solutions_idea + Solutions_proto + Report_convincingother +
Solution_noofimplement + Solutions_feedback + Solutions_involved +
Solutions_multipleprototype,
SNI_total = Add_report*11 + Report_follow*11 +
Add_campaign*14 + Campaign_join*7  +
Campaign_teamupdate*14 + Successstory_audit*1 +
Successstory_impact*6 + Successstory_product_suggest*2 +
Successstory_product_implement*14 +
+ Successstory_campaign*14 + Successstory_report*6  +
Solutions_product*11 + Solutions_proto*17 + Solutions_idea*17 +
Solutions_bene*6 + Solutions_desc*9 +
Report_metofficial * 9 + Report_convincingother * 12 +
Report_multipleagency * 9 + Report_calculatingimpact * 8 +
Campaign_Impactdetails * 8 + Campaign_fundraised * 5 +
Campaign_peoplereached * 9 +
Solution_noofimplement * 11 + Solutions_feedback * 6 +
Solutions_involved * 9 + Solutions_multipleprototype * 11
)
story_summary <- story_tracker %>%
group_by(`School Name`,`Name of Student ?`) %>%
summarise(sum_reports = sum(`Add_report`),
sum_reports_follow = sum(`Report_follow`),
sum_campaign = sum(`Add_campaign`), sum_campaign_join = sum(`Campaign_join`),
sum_idea = sum(`Solutions_idea`), sum_prototype = sum(`Solutions_proto`),
sum_product = sum(`Solutions_product`),sum_successstory = sum(`Success_story`),
sum_data = sum(`Data_orientation`), sum_hands_on = sum(`hands_on`),
sum_citizen = sum(`citizenship`),sum_problem = sum(`problem_solving`),
sum_critical = sum(`critical_thinking`),
sum_communications = sum(`communications`),
sum_comm_Collaboration = sum(`community_collaboration`),
sum_applied = sum(`Applied_empathy`), sum_grit = sum(`Grit`),
sum_entre = sum(`Entrepreneurship`),
sum_sni = sum(`SNI_total`),
persona = case_when(
sum_campaign > 0 &
(sum_prototype + sum_product > 0) &
(sum_prototype + sum_product + sum_campaign +
sum_reports + sum_successstory > 5)~ "Action Ant",
sum_campaign > 0 &
(sum_prototype + sum_product <= sum_campaign) ~ "Campaign Chameleon",
sum_campaign == 0 &
(sum_prototype + sum_product > sum_campaign) ~ "Hands On Hippo",
TRUE ~ "Reporting Rhino"))
write.csv(story_summary,paste0("Storysummary_",Sys.Date(),".csv"))
write.csv(story_tracker,paste0("Storytracker_sni_",Sys.Date(),".csv"))
rm(list = ls())
working_directory = "G:/Reap Benefit/Data/certificate_generator/certificateGeneration"
data_directory = "G:/Reap Benefit/Data/certificate_generator/data"
output_directory = "G:/Reap Benefit/Data/certificate_generator/output"
setwd(working_directory)
oldw <- getOption("warn")
options(warn = -1)
suppressMessages(library(officer))
suppressMessages(library(ggplot2))
suppressMessages(library(tidyverse))
suppressMessages(library(readxl))
suppressMessages(library(sysfonts))
#Image Variables for Text
img_src <- c(
"Action Ant" = c("pic" = "const/ActionAnt.png","height" = 1.61,"width"=1.13,
"left" = 5.58, "top" = 7.39),
"Builder Bear" = c("pic" = "const/BuilderBear.png", "height" = 1.80,"width"=1.03,
"left" = 5.63, "top" = 7.39),
"Campaign Chameleon" = c("pic" = "const/CampaignChameleon.png", "height" = 1.46,"width"=1.63,
"left" = 5.33, "top" = 7.39),
"Curious Cat" =  c("pic" = "const/CuriousCat.png", "height" = 1.60,"width"=1.03,
"left" = 5.61, "top" = 7.39),
"Hands On Hippo" = c("pic" = "const/HandsonHippo.png", "height" = 1.70,"width"=1.35,
"left" = 5.47, "top" = 7.39 ),
"Reporting Rhino" = c("pic" = "const/ReportingRhino.png", "height" = 1.70,"width"=1.18,
"left" = 5.56, "top" = 7.39),
"Techno Tiger" = c("pic" = "const/TechnoTiger.png","height" = 1.61,"width"=1.38,
"left" = 5.46, "top" = 7.39)
)
# Graph Positions of Skills
position <- c("Data Orientation", "Hands-on Skills",
"Citizenship", "Critical Thinking", "Problem Solving",
"Communication", "Community Collaboration",
"Grit", "Applied Empathy", "Entrepreneurship")
# Chart Colors
literacyColor <- "#86D1F2"
proficiencyColor <- "#EFC473"
characterColor <- "#EE8962"
#Read Data
trainxl <- readxl::read_xlsx(paste0(data_directory,"/data.xlsx")) #raw data
skilldf <- read.csv("const/Skills - new.csv") # Skill names
# Calculate Levels based on L0 - L7
trainxl$Level_Certi <- ifelse(trainxl$`Level Group` == "L0", "Level 0",
ifelse(trainxl$`Level Group` == "L1",  "Level 1",
ifelse(trainxl$`Level Group` == "L2",  "Level 2",
ifelse(trainxl$`Level Group` == "L3",  "Level 3",
ifelse(trainxl$`Level Group` == "L4",  "Level 4",
ifelse(trainxl$`Level Group` == "L5",  "Level 5",
ifelse(trainxl$`Level Group` == "L6",  "Level 6",
ifelse(trainxl$`Level Group` == "L7",  "Level 7","Error"
))))))))
# to find out how many certificates need to be created
certificateNum <- dim(trainxl)[1]
#generate example
# certificateNum <- 1
# What is the certificate template
certificate <- read_pptx("const/certificate_template.pptx")
i = 1
for(i in 1:certificateNum){
df1 <- trainxl[i,]
if (is.na(df1$Student_Name)) {
studentName <- "0"
} else {
studentName <- df1$Student_Name
}
studentSNI <- df1$`Sum of Index`
studentPersona <- df1$Persona
studentLevel <- df1$Level_Certi
studentGrade <- df1$Grade
studenNum <- df1$SLNUM
solveHubName <- df1$School_Name
# Civic Ladder
studentLadder <- case_when(
studentSNI <= 50 ~ "interested",
studentSNI <= 150 ~ "engaged",
studentSNI > 150 ~ "active"
)
# Formatting the text which generates the Certificattion message
# fptWhite is for normal text
# fptBold is same as fptWhite but bold
fptWhite = fp_text(color = "white", font.family = "Tahoma", font.size = 20)
fptBold = fp_text(color = "white",bold = TRUE,  font.family = "Tahoma", font.size = 20)
# Generating the certification message
if (studentName == "0") {
nameStud <- ftext("_____________", prop = fptBold)
} else {
nameStud <- ftext(studentName, prop = fptBold)
}
if (studentGrade == 0) {
gradeStud <- ftext("", prop = fptBold)
} else {
gradeStud <- ftext(studentGrade, prop = fptBold)
}
if (solveHubName == 0) {
nameHub <- ftext("_____________", prop = fptBold)
} else {
nameHub <- ftext(solveHubName, prop = fptBold)
}
# In case grade is absent - certification message wont generate for grade
if (studentGrade == 0) {
certText <- fpar(ftext("Congratulations! This is to certify that ",fptWhite),
nameStud,
ftext(" from ", fptWhite),
nameHub,
ftext(" is a Solve Ninja of Batch ", fptWhite),
ftext("2019-20.", prop = fptBold))
} else {
certText <- fpar(ftext("Congratulations! This is to certify that ",fptWhite),
nameStud,
ftext(" of ", fptWhite),
ftext("Grade ", fptBold),
gradeStud,
ftext(" from ", fptWhite),
nameHub,
ftext(" is a Solve Ninja of Batch ", fptWhite),
ftext("2019-20.", prop = fptBold))
}
# Reshape the df1 datafile for analysis
df1 <- gather(df1,key = "Details",value = "Actions",
-c(1:7, 18:30 ))
df1 <- merge(df1, skilldf, by.x = "Details", by.y = "index")
# We find max number of actions for dividing into grid lines
gridStop <- max(df1$Actions,3)
# To keep margin we multiply by 1.2
gridBar <- gridStop * 1.2
df1$skills <- factor(df1$skills, levels = position)
displaydf <- df1[, c(8,23)] #Keep only Student Name and Skills
# The function below creates gridlines by dividing the max
# Number of Actions into 15 parts
numGridlines <- 15 # 15 Grid lines
for(i in 1:numGridlines){
displaydf[[paste0("Action_",i)]] <- gridBar - ((i * gridBar)/numGridlines)
}
displaydf <- gather(displaydf, key= "More_Details",value = "Actions",
-c(1:2))
# Creating Plot
p <- ggplot(df1,mapping = aes(skills, Actions, fill = skills)) +
geom_bar(width = 1.00, stat = "identity", alpha = 0.95) +
geom_bar(data = displaydf, width = 1.00, fill = "grey",
stat = "identity", alpha = 0, color = "#bad8e1",
position = "dodge")+
theme_bw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
axis.line = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_blank(),
# axis.text.x = element_text(colour = "black",
#                            hjust = 0,
#                            vjust = 0,
#                            family = "Tahoma",
#                            size = 15),
panel.border = element_blank(),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.major.x = element_blank()
) +
scale_x_discrete(limits = position)+
scale_fill_manual(values = c(
"Data Orientation" = literacyColor,
"Hands-on Skills" = literacyColor,
"Citizenship" = literacyColor,
"Critical Thinking" = proficiencyColor,
"Problem Solving" = proficiencyColor,
"Communication" = proficiencyColor,
"Community Collaboration"= characterColor,
"Grit" = characterColor,
"Applied Empathy" = characterColor,
"Entrepreneurship" = characterColor
)) + coord_polar(theta = "x", start = 0, direction = 1)
# Inserting Plot Annotations
p <- p + annotate("text",
x = 1.2, y = gridBar+2 ,
label = "Data \nOrientation",
family = "Tahoma",
size = 2.5)
p <- p + annotate("text",
x = 2.1, y = gridBar+2,
label = "Hands On \nSkills",
family = "Tahoma",
size = 2.5)
p <- p + annotate("text",
x = 3, y = gridBar+3,
label = "Citizenship",
family = "Tahoma",
size = 2.5)
p <- p + annotate("text",
x = 3.9, y = gridBar+2,
label = "Critical \n Thinking",
family = "Tahoma",
size = 2.5)
p <- p + annotate("text",
x = 4.8, y = gridBar+2,
label = "Problem \n Solving",
family = "Tahoma",
size = 2.5)
p <- p + annotate("text",
x = 6.2, y = gridBar+1.7,
label = "Communication",
family = "Tahoma",
size = 2.5)
p <- p + annotate("text",
x = 7.1, y = gridBar+3,
label = "Community \nCollaboration",
family = "Tahoma",
size = 2.5)
p <- p + annotate("text",
x = 8, y = gridBar+1.7,
label = "Grit",
family = "Tahoma",
size = 2.5)
p <- p + annotate("text",
x = 8.9, y = gridBar+2.5,
label = "Applied \nEmpathy",
family = "Tahoma",
size = 2.5)
p <- p + annotate("text",
x = 9.8, y = gridBar+2,
label = "Entrepreneurship",
family = "Tahoma",
size = 2.5)
# Adding student details on certificate
certificate <- certificate %>%
add_slide(layout = "Title and Content", master = "Office Theme")%>%
ph_empty_at(left=1.49, top=2.49,
width=5.77, height=1.05)%>%
ph_empty_at(left=5.00, top=9.28,
width=2.5, height=0.47)%>%
ph_add_fpar(certText, level = 1, id_chr = 2) %>%
ph_add_par(level = 1, id_chr = 3) %>%
ph_add_text(paste0("You are a ", studentPersona,". You are at ",
studentLadder, " level."),
type = "body",
id_chr = 3,
style = fp_text(color = "black",
font.size = 10,
font.family = "Tahoma"))
# Inserting students Skill Plot
certificate <- ph_with_gg_at(x = certificate, value = p,
left = 1.739726, top = 6.868362,
height = 2.87, width = 3.3)
# Inserting students Solve Ninja Image
certificate <- ph_with_img_at(x = certificate,
src = img_src[paste0(studentPersona,".pic")],
left = as.numeric(img_src[paste0(studentPersona,".left")]),
top = as.numeric(img_src[paste0(studentPersona,".top")]),
height = as.numeric(img_src[paste0(studentPersona,".height")]),
width = as.numeric(img_src[paste0(studentPersona,".width")]))
}
#Print the final certificate
print(certificate, paste0(output_directory,"/certificates_",
trainxl$School_Name[1], "_",
round(as.numeric(Sys.time()),0),
".pptx"))
options(warn = oldw)
